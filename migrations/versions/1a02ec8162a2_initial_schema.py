"""initial schema

Revision ID: 1a02ec8162a2
Revises: 
Create Date: 2025-10-10 20:11:29.375700

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1a02ec8162a2'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_memory_embedding'), table_name='memory_snippets', postgresql_ops={'embedding': 'vector_l2_ops'}, postgresql_using='hnsw')
    op.drop_column('memory_snippets', 'embedding')
    op.drop_index(op.f('idx_plan_items_date'), table_name='plan_items')
    op.add_column('subtasks', sa.Column('text_sub', sa.TEXT(), nullable=False))
    op.alter_column('subtasks', 'ticket_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('subtasks', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.drop_index(op.f('idx_subtasks_status'), table_name='subtasks')
    op.drop_index(op.f('idx_subtasks_tags_gin'), table_name='subtasks', postgresql_using='gin')
    op.drop_constraint(op.f('subtasks_unique_seq_per_ticket'), 'subtasks', type_='unique')
    op.create_unique_constraint('uq_subtasks_ticket_seq', 'subtasks', ['ticket_id', 'seq'])
    op.drop_column('subtasks', 'text')
    op.alter_column('tickets', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('tickets', 'labels',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('tickets', 'components',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('tickets', 'tech',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('tickets', 'sprint',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_tickets_components_gin'), table_name='tickets', postgresql_using='gin')
    op.drop_index(op.f('idx_tickets_due_date'), table_name='tickets')
    op.drop_index(op.f('idx_tickets_labels_gin'), table_name='tickets', postgresql_using='gin')
    op.drop_index(op.f('idx_tickets_status'), table_name='tickets')
    op.drop_index(op.f('idx_tickets_tech_gin'), table_name='tickets', postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_tickets_tech_gin'), 'tickets', ['tech'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_tickets_status'), 'tickets', ['status'], unique=False)
    op.create_index(op.f('idx_tickets_labels_gin'), 'tickets', ['labels'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_tickets_due_date'), 'tickets', ['due_date'], unique=False)
    op.create_index(op.f('idx_tickets_components_gin'), 'tickets', ['components'], unique=False, postgresql_using='gin')
    op.alter_column('tickets', 'sprint',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tickets', 'tech',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('tickets', 'components',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('tickets', 'labels',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('tickets', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('subtasks', sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint('uq_subtasks_ticket_seq', 'subtasks', type_='unique')
    op.create_unique_constraint(op.f('subtasks_unique_seq_per_ticket'), 'subtasks', ['ticket_id', 'seq'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_subtasks_tags_gin'), 'subtasks', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_subtasks_status'), 'subtasks', ['status'], unique=False)
    op.alter_column('subtasks', 'tags',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('subtasks', 'ticket_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('subtasks', 'text_sub')
    op.create_index(op.f('idx_plan_items_date'), 'plan_items', ['date'], unique=False)
    op.add_column('memory_snippets', sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_memory_embedding'), 'memory_snippets', ['embedding'], unique=False, postgresql_ops={'embedding': 'vector_l2_ops'}, postgresql_using='hnsw')
    # ### end Alembic commands ###
